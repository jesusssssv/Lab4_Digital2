
Esclavo 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000228  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000968  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d3  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056f  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  000019dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022a  00000000  00000000  00001f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000212c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 81 00 	call	0x102	; 0x102 <main>
  88:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
#include "ADC.h"


void ADC_init(void)
{
	ADMUX |=  (1<<REFS0);		//Seleccionar el voltaje de referencia
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	ADMUX &=~ (1<<REFS1);
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	80 83       	st	Z, r24
	ADMUX &=~ (1<<ADLAR);		//Ajustar el resultado
  a0:	80 81       	ld	r24, Z
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADPS0);		// divisor = 128  16000/128 = 125 KHz
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1);
  b0:	80 81       	ld	r24, Z
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2);
  b6:	80 81       	ld	r24, Z
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);		// Encendemos en ADC
  bc:	80 81       	ld	r24, Z
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <ADC_read>:
}


uint16_t ADC_read(uint8_t canal)
{
	canal &= 0b00000111;            // Limitar la entrada a canales 0-7 (la mayoría de AVR tienen 8 canales ADC)
  c4:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF0) | canal; // Conservar los 4 bits superiores (config) y establecer los bits de selección de canal
  c6:	ec e7       	ldi	r30, 0x7C	; 124
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	90 7f       	andi	r25, 0xF0	; 240
  ce:	89 2b       	or	r24, r25
  d0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);            // Inicia la conversión
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));      // Esperar hasta que se complete la conversión
  dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e0:	86 fd       	sbrc	r24, 6
  e2:	fc cf       	rjmp	.-8      	; 0xdc <ADC_read+0x18>
	return ADC;                     // Devolver el valor del ADC
  e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ec:	08 95       	ret

000000ee <I2C_Slave_Init>:
//*****************************************************************************
// Funcion para inicializar I2C Esclavo
//*****************************************************************************

void I2C_Slave_Init(uint8_t address) {
    DDRC &= ~((1<<DDC4)|(1<<DDC5));  // Pines de I2C como entradas
  ee:	97 b1       	in	r25, 0x07	; 7
  f0:	9f 7c       	andi	r25, 0xCF	; 207
  f2:	97 b9       	out	0x07, r25	; 7

    TWAR = address << 1;  // Se asigna la direccion que tendra
  f4:	88 0f       	add	r24, r24
  f6:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    // TWAR = (address << 1 | 0x01);  // Se asigna la direccion que tendra y habilita llamada gen

    // Se habilita la interfaz, ACK automático, se habilita la ISR
    TWCR = (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
  fa:	85 e4       	ldi	r24, 0x45	; 69
  fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 100:	08 95       	ret

00000102 <main>:
//******************************************************************


int main(void)
{
	ADC_init();
 102:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	//UART_init();
	I2C_Slave_Init (SlaveAddress);
 106:	80 e4       	ldi	r24, 0x40	; 64
 108:	0e 94 77 00 	call	0xee	; 0xee <I2C_Slave_Init>
	
	sei();
 10c:	78 94       	sei
	
    while (1) 
    {
		
		valueADC = ADC_read(6) >> 2;
 10e:	86 e0       	ldi	r24, 0x06	; 6
 110:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_read>
 114:	96 95       	lsr	r25
 116:	87 95       	ror	r24
 118:	96 95       	lsr	r25
 11a:	87 95       	ror	r24
 11c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		//uint8_to_string(valueADC);
		//UART_Char('\n');
		//_delay_ms(100);

		if (buffer == 'L')
 124:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <buffer>
 128:	8c 34       	cpi	r24, 0x4C	; 76
 12a:	89 f7       	brne	.-30     	; 0x10e <main+0xc>
		{
			buffer = 0;
 12c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <buffer>
 130:	ee cf       	rjmp	.-36     	; 0x10e <main+0xc>

00000132 <__vector_24>:
		
		
    }
}

ISR(TWI_vect){
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	
	uint8_t estado;
	estado = TWSR & 0xFC;
 142:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 146:	8c 7f       	andi	r24, 0xFC	; 252
	switch (estado){
 148:	80 38       	cpi	r24, 0x80	; 128
 14a:	99 f0       	breq	.+38     	; 0x172 <__vector_24+0x40>
 14c:	28 f4       	brcc	.+10     	; 0x158 <__vector_24+0x26>
 14e:	80 36       	cpi	r24, 0x60	; 96
 150:	51 f0       	breq	.+20     	; 0x166 <__vector_24+0x34>
 152:	80 37       	cpi	r24, 0x70	; 112
 154:	41 f0       	breq	.+16     	; 0x166 <__vector_24+0x34>
 156:	1f c0       	rjmp	.+62     	; 0x196 <__vector_24+0x64>
 158:	88 3a       	cpi	r24, 0xA8	; 168
 15a:	a9 f0       	breq	.+42     	; 0x186 <__vector_24+0x54>
 15c:	88 3b       	cpi	r24, 0xB8	; 184
 15e:	99 f0       	breq	.+38     	; 0x186 <__vector_24+0x54>
 160:	80 39       	cpi	r24, 0x90	; 144
 162:	c9 f4       	brne	.+50     	; 0x196 <__vector_24+0x64>
 164:	06 c0       	rjmp	.+12     	; 0x172 <__vector_24+0x40>
		case  0x60:
		case 0x70:
			TWCR |= (1<<TWINT);
 166:	ec eb       	ldi	r30, 0xBC	; 188
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	80 83       	st	Z, r24
			break;
 170:	17 c0       	rjmp	.+46     	; 0x1a0 <__vector_24+0x6e>
		case 0x80:
		case 0x90:
			buffer = TWDR;
 172:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 176:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <buffer>
			TWCR |= (1 << TWINT); //Bandera limpia			
 17a:	ec eb       	ldi	r30, 0xBC	; 188
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	80 68       	ori	r24, 0x80	; 128
 182:	80 83       	st	Z, r24
			break;
 184:	0d c0       	rjmp	.+26     	; 0x1a0 <__vector_24+0x6e>
		case 0xA8:
		case 0xB8:
			TWDR = valueADC;	
 186:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA); //Envia
 18e:	85 ec       	ldi	r24, 0xC5	; 197
 190:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 			break;
 194:	05 c0       	rjmp	.+10     	; 0x1a0 <__vector_24+0x6e>
		default:		
			TWCR |= (1 << TWINT) | (1 << TWSTO); //Libera errores
 196:	ec eb       	ldi	r30, 0xBC	; 188
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 69       	ori	r24, 0x90	; 144
 19e:	80 83       	st	Z, r24
			break;
	}
	
}
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	8f 91       	pop	r24
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
