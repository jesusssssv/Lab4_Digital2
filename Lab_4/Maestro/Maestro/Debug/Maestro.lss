
Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000005e4  00000678  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080012a  0080012a  000006a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001728  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c44  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a12  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  0000356c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000653  00000000  00000000  00003760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c9f  00000000  00000000  00003db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004a52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 ee       	ldi	r30, 0xE4	; 228
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 32       	cpi	r26, 0x2A	; 42
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e2       	ldi	r26, 0x2A	; 42
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a0 33       	cpi	r26, 0x30	; 48
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 01 02 	call	0x402	; 0x402 <main>
  ea:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <I2C_Master_Init>:
#include "I2C.h"  // Inclusión del archivo de cabecera con las declaraciones de funciones y definiciones

//***************************************************************
// Función para inicializar I2C en modo Maestro
//***************************************************************
void I2C_Master_Init(unsigned long SCL_Clock, uint8_t Prescaler) {
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	8b 01       	movw	r16, r22
  fa:	9c 01       	movw	r18, r24
  fc:	c4 2f       	mov	r28, r20

    DDRC &= ~((1 << DDC4) | (1 << DDC5));  // Configura los pines PC4 (SDA) y PC5 (SCL) como entradas (modo I2C)
  fe:	87 b1       	in	r24, 0x07	; 7
 100:	8f 7c       	andi	r24, 0xCF	; 207
 102:	87 b9       	out	0x07, r24	; 7

    // Configura el prescaler para el bit rate
    switch (Prescaler) {
 104:	44 30       	cpi	r20, 0x04	; 4
 106:	79 f0       	breq	.+30     	; 0x126 <I2C_Master_Init+0x34>
 108:	18 f4       	brcc	.+6      	; 0x110 <I2C_Master_Init+0x1e>
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	31 f0       	breq	.+12     	; 0x11a <I2C_Master_Init+0x28>
 10e:	23 c0       	rjmp	.+70     	; 0x156 <I2C_Master_Init+0x64>
 110:	40 31       	cpi	r20, 0x10	; 16
 112:	91 f0       	breq	.+36     	; 0x138 <I2C_Master_Init+0x46>
 114:	40 34       	cpi	r20, 0x40	; 64
 116:	c9 f0       	breq	.+50     	; 0x14a <I2C_Master_Init+0x58>
 118:	1e c0       	rjmp	.+60     	; 0x156 <I2C_Master_Init+0x64>
        case 1:
            TWSR0 &= ~((1 << TWPS1) | (1 << TWPS0)); // Prescaler = 1
 11a:	e9 eb       	ldi	r30, 0xB9	; 185
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	8c 7f       	andi	r24, 0xFC	; 252
 122:	80 83       	st	Z, r24
            break;
 124:	1e c0       	rjmp	.+60     	; 0x162 <I2C_Master_Init+0x70>
        case 4:
            TWSR0 &= ~(1 << TWPS1);  // Prescaler = 4
 126:	e9 eb       	ldi	r30, 0xB9	; 185
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	80 83       	st	Z, r24
            TWSR0 |= (1 << TWPS0);
 130:	80 81       	ld	r24, Z
 132:	81 60       	ori	r24, 0x01	; 1
 134:	80 83       	st	Z, r24
            break;
 136:	15 c0       	rjmp	.+42     	; 0x162 <I2C_Master_Init+0x70>
        case 16:
            TWSR0 &= ~(1 << TWPS0);  // Prescaler = 16
 138:	e9 eb       	ldi	r30, 0xB9	; 185
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8e 7f       	andi	r24, 0xFE	; 254
 140:	80 83       	st	Z, r24
            TWSR0 |= (1 << TWPS1);
 142:	80 81       	ld	r24, Z
 144:	82 60       	ori	r24, 0x02	; 2
 146:	80 83       	st	Z, r24
            break;
 148:	0c c0       	rjmp	.+24     	; 0x162 <I2C_Master_Init+0x70>
        case 64:
            TWSR0 |= (1 << TWPS1) | (1 << TWPS0);  // Prescaler = 64
 14a:	e9 eb       	ldi	r30, 0xB9	; 185
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	83 60       	ori	r24, 0x03	; 3
 152:	80 83       	st	Z, r24
            break;
 154:	06 c0       	rjmp	.+12     	; 0x162 <I2C_Master_Init+0x70>
		default:
			TWSR0 &= ~((1 << TWPS1) | (1 << TWPS0)); // Si se pasa otro valor, usa 1 como predeterminado
 156:	e9 eb       	ldi	r30, 0xB9	; 185
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8c 7f       	andi	r24, 0xFC	; 252
 15e:	80 83       	st	Z, r24
			Prescaler = 1;
 160:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    }

    // Configura el Bit Rate Register (TWBR0) según la frecuencia de CPU y prescaler
    // TWBR0 debe ser mayor a 10 para funcionamiento estable
	TWBR0 = (((16000000)/SCL_Clock) - 16) / (2 * Prescaler); 
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	74 e2       	ldi	r23, 0x24	; 36
 166:	84 ef       	ldi	r24, 0xF4	; 244
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	a9 01       	movw	r20, r18
 16c:	98 01       	movw	r18, r16
 16e:	0e 94 ce 02 	call	0x59c	; 0x59c <__udivmodsi4>
 172:	ca 01       	movw	r24, r20
 174:	b9 01       	movw	r22, r18
 176:	60 51       	subi	r22, 0x10	; 16
 178:	71 09       	sbc	r23, r1
 17a:	81 09       	sbc	r24, r1
 17c:	91 09       	sbc	r25, r1
 17e:	4c 2f       	mov	r20, r28
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	9a 01       	movw	r18, r20
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	03 2e       	mov	r0, r19
 18a:	00 0c       	add	r0, r0
 18c:	44 0b       	sbc	r20, r20
 18e:	55 0b       	sbc	r21, r21
 190:	0e 94 ce 02 	call	0x59c	; 0x59c <__udivmodsi4>
 194:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	TWCR0 |= (1 << TWEN);  // Habilita la interfaz TWI (I2C)
 198:	ec eb       	ldi	r30, 0xBC	; 188
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	84 60       	ori	r24, 0x04	; 4
 1a0:	80 83       	st	Z, r24
}
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <I2C_Master_Start>:

//************************************************************************
// Función que inicia la comunicación I2C (Start condition)
//************************************************************************
void I2C_Master_Start(void){
    TWCR0 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // Genera condición START y habilita TWI
 1aa:	84 ea       	ldi	r24, 0xA4	; 164
 1ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR0 & (1 << TWINT))); // Espera hasta que la condición START se haya transmitido
 1b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b4:	88 23       	and	r24, r24
 1b6:	e4 f7       	brge	.-8      	; 0x1b0 <I2C_Master_Start+0x6>
}
 1b8:	08 95       	ret

000001ba <I2C_Master_Stop>:

//************************************************************************
// Función que detiene la comunicación I2C (Stop condition)
//************************************************************************
void I2C_Master_Stop(void){
    TWCR0 = (1 << TWEN) | (1 << TWINT) | (1 << TWSTO); // Genera condición STOP
 1ba:	84 e9       	ldi	r24, 0x94	; 148
 1bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c0:	08 95       	ret

000001c2 <I2C_Master_Write>:
// Retorna 1 si hay éxito, o el código de error (estado) si no
//************************************************************************
uint8_t I2C_Master_Write(uint8_t dato){
    uint8_t estado;

    TWDR0 = dato;  // Carga el dato en el registro de datos TWI
 1c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR0 = (1 << TWEN) | (1 << TWINT); // Inicia la transmisión del dato
 1c6:	84 e8       	ldi	r24, 0x84	; 132
 1c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while (!(TWCR0 & (1 << TWINT))); // Espera a que se complete la transmisión
 1cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d0:	88 23       	and	r24, r24
 1d2:	e4 f7       	brge	.-8      	; 0x1cc <I2C_Master_Write+0xa>

    estado = TWSR0 & 0xF8; // Extrae el código de estado del TWSR
 1d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1d8:	88 7f       	andi	r24, 0xF8	; 248

    // Verifica si el dato fue transmitido correctamente y se recibió ACK
    if (estado == 0x18 || estado == 0x28 || estado == 0x40) {
 1da:	88 31       	cpi	r24, 0x18	; 24
 1dc:	31 f0       	breq	.+12     	; 0x1ea <I2C_Master_Write+0x28>
 1de:	88 32       	cpi	r24, 0x28	; 40
 1e0:	31 f0       	breq	.+12     	; 0x1ee <I2C_Master_Write+0x2c>
 1e2:	80 34       	cpi	r24, 0x40	; 64
 1e4:	29 f4       	brne	.+10     	; 0x1f0 <I2C_Master_Write+0x2e>
        return 1; // Éxito
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	08 95       	ret
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	08 95       	ret
 1ee:	81 e0       	ldi	r24, 0x01	; 1
    } else {
        return estado; // Error, devuelve código de estado
    }
}
 1f0:	08 95       	ret

000001f2 <LCD8_CMD>:

void LCD8_Variable(float v, uint8_t n){
	char str[10];
	float_to_string(v, str, n);
	LCD8_Write_String(str);
}
 1f2:	95 b1       	in	r25, 0x05	; 5
 1f4:	9b 7f       	andi	r25, 0xFB	; 251
 1f6:	95 b9       	out	0x05, r25	; 5
 1f8:	9b b1       	in	r25, 0x0b	; 11
 1fa:	28 2f       	mov	r18, r24
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	22 0f       	add	r18, r18
 200:	33 1f       	adc	r19, r19
 202:	22 0f       	add	r18, r18
 204:	33 1f       	adc	r19, r19
 206:	93 70       	andi	r25, 0x03	; 3
 208:	29 2b       	or	r18, r25
 20a:	2b b9       	out	0x0b, r18	; 11
 20c:	95 b1       	in	r25, 0x05	; 5
 20e:	9c 7f       	andi	r25, 0xFC	; 252
 210:	82 95       	swap	r24
 212:	86 95       	lsr	r24
 214:	86 95       	lsr	r24
 216:	83 70       	andi	r24, 0x03	; 3
 218:	89 2b       	or	r24, r25
 21a:	85 b9       	out	0x05, r24	; 5
 21c:	85 b1       	in	r24, 0x05	; 5
 21e:	88 60       	ori	r24, 0x08	; 8
 220:	85 b9       	out	0x05, r24	; 5
 222:	8f e9       	ldi	r24, 0x9F	; 159
 224:	9f e0       	ldi	r25, 0x0F	; 15
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <LCD8_CMD+0x34>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <LCD8_CMD+0x3a>
 22c:	00 00       	nop
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	87 7f       	andi	r24, 0xF7	; 247
 232:	85 b9       	out	0x05, r24	; 5
 234:	8f e9       	ldi	r24, 0x9F	; 159
 236:	9f e0       	ldi	r25, 0x0F	; 15
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <LCD8_CMD+0x46>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <LCD8_CMD+0x4c>
 23e:	00 00       	nop
 240:	08 95       	ret

00000242 <initLCD8>:
 242:	8a b1       	in	r24, 0x0a	; 10
 244:	8c 6f       	ori	r24, 0xFC	; 252
 246:	8a b9       	out	0x0a, r24	; 10
 248:	84 b1       	in	r24, 0x04	; 4
 24a:	8f 60       	ori	r24, 0x0F	; 15
 24c:	84 b9       	out	0x04, r24	; 4
 24e:	8f e5       	ldi	r24, 0x5F	; 95
 250:	9a ee       	ldi	r25, 0xEA	; 234
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <initLCD8+0x10>
 256:	00 c0       	rjmp	.+0      	; 0x258 <initLCD8+0x16>
 258:	00 00       	nop
 25a:	88 e3       	ldi	r24, 0x38	; 56
 25c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD8_CMD>
 260:	8f e1       	ldi	r24, 0x1F	; 31
 262:	9e e4       	ldi	r25, 0x4E	; 78
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <initLCD8+0x22>
 268:	00 c0       	rjmp	.+0      	; 0x26a <initLCD8+0x28>
 26a:	00 00       	nop
 26c:	8c e0       	ldi	r24, 0x0C	; 12
 26e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD8_CMD>
 272:	8f e3       	ldi	r24, 0x3F	; 63
 274:	9f e1       	ldi	r25, 0x1F	; 31
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <initLCD8+0x34>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <initLCD8+0x3a>
 27c:	00 00       	nop
 27e:	86 e0       	ldi	r24, 0x06	; 6
 280:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD8_CMD>
 284:	8f e3       	ldi	r24, 0x3F	; 63
 286:	9f e1       	ldi	r25, 0x1F	; 31
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <initLCD8+0x46>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <initLCD8+0x4c>
 28e:	00 00       	nop
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD8_CMD>
 296:	8f e3       	ldi	r24, 0x3F	; 63
 298:	9f e1       	ldi	r25, 0x1F	; 31
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <initLCD8+0x58>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <initLCD8+0x5e>
 2a0:	00 00       	nop
 2a2:	08 95       	ret

000002a4 <LCD8_Write_Char>:
 2a4:	95 b1       	in	r25, 0x05	; 5
 2a6:	94 60       	ori	r25, 0x04	; 4
 2a8:	95 b9       	out	0x05, r25	; 5
 2aa:	9b b1       	in	r25, 0x0b	; 11
 2ac:	28 2f       	mov	r18, r24
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	22 0f       	add	r18, r18
 2b6:	33 1f       	adc	r19, r19
 2b8:	93 70       	andi	r25, 0x03	; 3
 2ba:	29 2b       	or	r18, r25
 2bc:	2b b9       	out	0x0b, r18	; 11
 2be:	95 b1       	in	r25, 0x05	; 5
 2c0:	9c 7f       	andi	r25, 0xFC	; 252
 2c2:	82 95       	swap	r24
 2c4:	86 95       	lsr	r24
 2c6:	86 95       	lsr	r24
 2c8:	83 70       	andi	r24, 0x03	; 3
 2ca:	89 2b       	or	r24, r25
 2cc:	84 60       	ori	r24, 0x04	; 4
 2ce:	85 b9       	out	0x05, r24	; 5
 2d0:	85 b1       	in	r24, 0x05	; 5
 2d2:	88 60       	ori	r24, 0x08	; 8
 2d4:	85 b9       	out	0x05, r24	; 5
 2d6:	8f e9       	ldi	r24, 0x9F	; 159
 2d8:	9f e0       	ldi	r25, 0x0F	; 15
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD8_Write_Char+0x36>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD8_Write_Char+0x3c>
 2e0:	00 00       	nop
 2e2:	85 b1       	in	r24, 0x05	; 5
 2e4:	87 7f       	andi	r24, 0xF7	; 247
 2e6:	85 b9       	out	0x05, r24	; 5
 2e8:	8f e9       	ldi	r24, 0x9F	; 159
 2ea:	9f e0       	ldi	r25, 0x0F	; 15
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD8_Write_Char+0x48>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD8_Write_Char+0x4e>
 2f2:	00 00       	nop
 2f4:	08 95       	ret

000002f6 <LCD8_Write_String>:
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	8c 01       	movw	r16, r24
 300:	c0 e0       	ldi	r28, 0x00	; 0
 302:	d0 e0       	ldi	r29, 0x00	; 0
 304:	03 c0       	rjmp	.+6      	; 0x30c <LCD8_Write_String+0x16>
 306:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD8_Write_Char>
 30a:	21 96       	adiw	r28, 0x01	; 1
 30c:	f8 01       	movw	r30, r16
 30e:	ec 0f       	add	r30, r28
 310:	fd 1f       	adc	r31, r29
 312:	80 81       	ld	r24, Z
 314:	81 11       	cpse	r24, r1
 316:	f7 cf       	rjmp	.-18     	; 0x306 <LCD8_Write_String+0x10>
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	08 95       	ret

00000322 <LCD8_Set_Cursor>:
 322:	61 11       	cpse	r22, r1
 324:	02 c0       	rjmp	.+4      	; 0x32a <LCD8_Set_Cursor+0x8>
 326:	80 58       	subi	r24, 0x80	; 128
 328:	05 c0       	rjmp	.+10     	; 0x334 <LCD8_Set_Cursor+0x12>
 32a:	61 30       	cpi	r22, 0x01	; 1
 32c:	11 f4       	brne	.+4      	; 0x332 <LCD8_Set_Cursor+0x10>
 32e:	80 54       	subi	r24, 0x40	; 64
 330:	01 c0       	rjmp	.+2      	; 0x334 <LCD8_Set_Cursor+0x12>
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD8_CMD>
 338:	08 95       	ret

0000033a <LCD8_Clear>:
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD8_CMD>
 340:	8f e3       	ldi	r24, 0x3F	; 63
 342:	9f e1       	ldi	r25, 0x1F	; 31
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <LCD8_Clear+0xa>
 348:	00 c0       	rjmp	.+0      	; 0x34a <LCD8_Clear+0x10>
 34a:	00 00       	nop
 34c:	08 95       	ret

0000034e <uint8_to_string>:
	buffer[i++] = (parte_decimal / 10) + '0';
	buffer[i++] = (parte_decimal % 10) + '0';
	buffer[i] = '\0';
}

void uint8_to_string(uint8_t num, char *buffer) {
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	00 d0       	rcall	.+0      	; 0x354 <uint8_to_string+0x6>
 354:	00 d0       	rcall	.+0      	; 0x356 <uint8_to_string+0x8>
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
	uint8_t i = 0;
	char temp[4];
	uint8_t j = 0;
	
	if (num == 0) {
 35a:	81 11       	cpse	r24, r1
 35c:	1e c0       	rjmp	.+60     	; 0x39a <uint8_to_string+0x4c>
		buffer[i++] = '0';
 35e:	80 e3       	ldi	r24, 0x30	; 48
 360:	fb 01       	movw	r30, r22
 362:	80 83       	st	Z, r24
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	2c c0       	rjmp	.+88     	; 0x3c0 <uint8_to_string+0x72>
		} else {
		while (num > 0) {
			temp[j++] = (num % 10) + '0';
 368:	e1 e0       	ldi	r30, 0x01	; 1
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	ec 0f       	add	r30, r28
 36e:	fd 1f       	adc	r31, r29
 370:	e9 0f       	add	r30, r25
 372:	f1 1d       	adc	r31, r1
 374:	2d ec       	ldi	r18, 0xCD	; 205
 376:	82 9f       	mul	r24, r18
 378:	21 2d       	mov	r18, r1
 37a:	11 24       	eor	r1, r1
 37c:	26 95       	lsr	r18
 37e:	26 95       	lsr	r18
 380:	26 95       	lsr	r18
 382:	42 2f       	mov	r20, r18
 384:	44 0f       	add	r20, r20
 386:	34 2f       	mov	r19, r20
 388:	33 0f       	add	r19, r19
 38a:	33 0f       	add	r19, r19
 38c:	34 0f       	add	r19, r20
 38e:	83 1b       	sub	r24, r19
 390:	80 5d       	subi	r24, 0xD0	; 208
 392:	80 83       	st	Z, r24
			num /= 10;
 394:	82 2f       	mov	r24, r18
	
	if (num == 0) {
		buffer[i++] = '0';
		} else {
		while (num > 0) {
			temp[j++] = (num % 10) + '0';
 396:	9f 5f       	subi	r25, 0xFF	; 255
 398:	01 c0       	rjmp	.+2      	; 0x39c <uint8_to_string+0x4e>
 39a:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t j = 0;
	
	if (num == 0) {
		buffer[i++] = '0';
		} else {
		while (num > 0) {
 39c:	81 11       	cpse	r24, r1
 39e:	e4 cf       	rjmp	.-56     	; 0x368 <uint8_to_string+0x1a>
 3a0:	0d c0       	rjmp	.+26     	; 0x3bc <uint8_to_string+0x6e>
			temp[j++] = (num % 10) + '0';
			num /= 10;
		}
		while (j > 0) {
			buffer[i++] = temp[--j];
 3a2:	db 01       	movw	r26, r22
 3a4:	a8 0f       	add	r26, r24
 3a6:	b1 1d       	adc	r27, r1
 3a8:	91 50       	subi	r25, 0x01	; 1
 3aa:	e1 e0       	ldi	r30, 0x01	; 1
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	ec 0f       	add	r30, r28
 3b0:	fd 1f       	adc	r31, r29
 3b2:	e9 0f       	add	r30, r25
 3b4:	f1 1d       	adc	r31, r1
 3b6:	20 81       	ld	r18, Z
 3b8:	2c 93       	st	X, r18
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
		} else {
		while (num > 0) {
			temp[j++] = (num % 10) + '0';
			num /= 10;
		}
		while (j > 0) {
 3bc:	91 11       	cpse	r25, r1
 3be:	f1 cf       	rjmp	.-30     	; 0x3a2 <uint8_to_string+0x54>
			buffer[i++] = temp[--j];
		}
	}
	buffer[i] = '\0';
 3c0:	fb 01       	movw	r30, r22
 3c2:	e8 0f       	add	r30, r24
 3c4:	f1 1d       	adc	r31, r1
 3c6:	10 82       	st	Z, r1
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <LCD8_Variable_U>:
	char str[10];
	float_to_string(v, str, n);
	LCD8_Write_String(str);
}

void LCD8_Variable_U(uint8_t v){
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	00 d0       	rcall	.+0      	; 0x3dc <LCD8_Variable_U+0x6>
 3dc:	00 d0       	rcall	.+0      	; 0x3de <LCD8_Variable_U+0x8>
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
	char str[4];
	uint8_to_string(v, str);
 3e2:	be 01       	movw	r22, r28
 3e4:	6f 5f       	subi	r22, 0xFF	; 255
 3e6:	7f 4f       	sbci	r23, 0xFF	; 255
 3e8:	0e 94 a7 01 	call	0x34e	; 0x34e <uint8_to_string>
	LCD8_Write_String(str);
 3ec:	ce 01       	movw	r24, r28
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD8_Write_String>
}
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	0f 90       	pop	r0
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <main>:
uint8_t valorI2C_2 = 0;  // Valor recibido del esclavo 2 (ADC)

int main(void)
{
	// Inicialización de LCD e I2C
	initLCD8(); // Inicializa el LCD en modo 8 bits
 402:	0e 94 21 01 	call	0x242	; 0x242 <initLCD8>
	I2C_Master_Init(100000, 1); // Inicializa el I2C a 100kHz, como maestro
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	60 ea       	ldi	r22, 0xA0	; 160
 40a:	76 e8       	ldi	r23, 0x86	; 134
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_Master_Init>

	// Mensaje de bienvenida en la pantalla
	LCD8_Clear();
 414:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD8_Clear>
	LCD8_Set_Cursor(0, 0);
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 91 01 	call	0x322	; 0x322 <LCD8_Set_Cursor>
	LCD8_Write_String("Sistema I2C");
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD8_Write_String>
	LCD8_Set_Cursor(0, 1);
 428:	61 e0       	ldi	r22, 0x01	; 1
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 91 01 	call	0x322	; 0x322 <LCD8_Set_Cursor>
	LCD8_Write_String("Iniciando...");
 430:	8c e0       	ldi	r24, 0x0C	; 12
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD8_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 438:	2f ef       	ldi	r18, 0xFF	; 255
 43a:	87 ea       	ldi	r24, 0xA7	; 167
 43c:	91 e6       	ldi	r25, 0x61	; 97
 43e:	21 50       	subi	r18, 0x01	; 1
 440:	80 40       	sbci	r24, 0x00	; 0
 442:	90 40       	sbci	r25, 0x00	; 0
 444:	e1 f7       	brne	.-8      	; 0x43e <main+0x3c>
 446:	00 c0       	rjmp	.+0      	; 0x448 <main+0x46>
 448:	00 00       	nop
	_delay_ms(2000); // Espera 2 segundos

	while (1)
	{
		// ========== ACTUALIZACIÓN DEL DISPLAY ==========
		LCD8_Clear(); // Limpia la pantalla LCD
 44a:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD8_Clear>

		// Mostrar valor del contador (esclavo 1)
		LCD8_Set_Cursor(0, 0);
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 91 01 	call	0x322	; 0x322 <LCD8_Set_Cursor>
		LCD8_Write_String("Contador: ");
 456:	89 e1       	ldi	r24, 0x19	; 25
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD8_Write_String>
		LCD8_Set_Cursor(4, 1);
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	84 e0       	ldi	r24, 0x04	; 4
 462:	0e 94 91 01 	call	0x322	; 0x322 <LCD8_Set_Cursor>
		LCD8_Variable_U(valorI2C); // Muestra valor numérico sin signo
 466:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <valorI2C>
 46a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD8_Variable_U>

		// Mostrar valor del ADC (esclavo 2)
		LCD8_Set_Cursor(11, 0);
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	8b e0       	ldi	r24, 0x0B	; 11
 472:	0e 94 91 01 	call	0x322	; 0x322 <LCD8_Set_Cursor>
		LCD8_Write_String("ADC: ");
 476:	84 e2       	ldi	r24, 0x24	; 36
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD8_Write_String>
		LCD8_Set_Cursor(12, 1);
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	8c e0       	ldi	r24, 0x0C	; 12
 482:	0e 94 91 01 	call	0x322	; 0x322 <LCD8_Set_Cursor>
		LCD8_Variable_U(valorI2C_2); // Muestra valor numérico sin signo
 486:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 48a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD8_Variable_U>
 48e:	2f ef       	ldi	r18, 0xFF	; 255
 490:	8b e4       	ldi	r24, 0x4B	; 75
 492:	9d e1       	ldi	r25, 0x1D	; 29
 494:	21 50       	subi	r18, 0x01	; 1
 496:	80 40       	sbci	r24, 0x00	; 0
 498:	90 40       	sbci	r25, 0x00	; 0
 49a:	e1 f7       	brne	.-8      	; 0x494 <main+0x92>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <main+0x9c>
 49e:	00 00       	nop

		_delay_ms(600); // Espera para que se actualice el display correctamente

		// ========== COMUNICACIÓN I2C - CONTADOR ==========
		I2C_Master_Start(); // Inicio de comunicación I2C
 4a0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Master_Start>
		// Dirección de esclavo 1 + escritura (bit 0 = 0)
		bufferI2C = slave_1 << 1 & 0b11111110;
 4a4:	80 e6       	ldi	r24, 0x60	; 96
 4a6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <bufferI2C>
		temp = I2C_Master_Write(bufferI2C); // Enviar dirección del esclavo
 4aa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_Master_Write>
 4ae:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <temp>
		if(temp != 1){
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	19 f0       	breq	.+6      	; 0x4bc <main+0xba>
			I2C_Master_Stop(); // Si no responde, se detiene
 4b6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Master_Stop>
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <main+0xc4>
		} else {
			I2C_Master_Write('R'); // Se envía comando 'R' para pedir dato
 4bc:	82 e5       	ldi	r24, 0x52	; 82
 4be:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_Master_Write>
			I2C_Master_Stop(); // Se finaliza la comunicación
 4c2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Master_Stop>
 4c6:	8f e3       	ldi	r24, 0x3F	; 63
 4c8:	9c e9       	ldi	r25, 0x9C	; 156
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <main+0xc8>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <main+0xce>
 4d0:	00 00       	nop
		}

		_delay_ms(10); // Espera breve

		I2C_Master_Start(); // Nueva comunicación para lectura
 4d2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Master_Start>
		bufferI2C = slave_1 << 1 | 0b00000001; // Dirección + lectura (bit 0 = 1)
 4d6:	81 e6       	ldi	r24, 0x61	; 97
 4d8:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <bufferI2C>
		temp = I2C_Master_Write(bufferI2C);
 4dc:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_Master_Write>
 4e0:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <temp>
		if (temp != 1){
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	19 f0       	breq	.+6      	; 0x4ee <main+0xec>
			I2C_Master_Stop(); // Si no responde, se detiene
 4e8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Master_Stop>
 4ec:	0d c0       	rjmp	.+26     	; 0x508 <main+0x106>
		} else{
			TWCR0 = (1<<TWINT)|(1<<TWEN); // Habilitar lectura sin ACK
 4ee:	84 e8       	ldi	r24, 0x84	; 132
 4f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			while (!(TWCR0 & (1<<TWINT))); // Espera hasta que se reciba el dato
 4f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4f8:	88 23       	and	r24, r24
 4fa:	e4 f7       	brge	.-8      	; 0x4f4 <main+0xf2>
			valorI2C = TWDR0; // Guarda el dato recibido
 4fc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 500:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <valorI2C>
			I2C_Master_Stop(); // Finaliza la comunicación
 504:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Master_Stop>
 508:	8f e3       	ldi	r24, 0x3F	; 63
 50a:	9c e9       	ldi	r25, 0x9C	; 156
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <main+0x10a>
 510:	00 c0       	rjmp	.+0      	; 0x512 <main+0x110>
 512:	00 00       	nop
		}
		_delay_ms(10); // Espera breve

		// ========== COMUNICACIÓN I2C - ADC ==========
		I2C_Master_Start(); // Inicia comunicación
 514:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Master_Start>
		bufferI2C_2 = slave_2 << 1 & 0b11111110; // Dirección de esclavo 2 + escritura
 518:	80 e8       	ldi	r24, 0x80	; 128
 51a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <bufferI2C_2>
		temp = I2C_Master_Write(bufferI2C_2);
 51e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_Master_Write>
 522:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <temp>
		if(temp != 1){
 526:	81 30       	cpi	r24, 0x01	; 1
 528:	19 f0       	breq	.+6      	; 0x530 <main+0x12e>
			I2C_Master_Stop(); // Detiene si hay error
 52a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Master_Stop>
 52e:	05 c0       	rjmp	.+10     	; 0x53a <main+0x138>
		} else {
			I2C_Master_Write('L'); // Se envía comando 'L' para pedir lectura de ADC
 530:	8c e4       	ldi	r24, 0x4C	; 76
 532:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_Master_Write>
			I2C_Master_Stop();
 536:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Master_Stop>
 53a:	8f e3       	ldi	r24, 0x3F	; 63
 53c:	9c e9       	ldi	r25, 0x9C	; 156
 53e:	01 97       	sbiw	r24, 0x01	; 1
 540:	f1 f7       	brne	.-4      	; 0x53e <main+0x13c>
 542:	00 c0       	rjmp	.+0      	; 0x544 <main+0x142>
 544:	00 00       	nop
		}

		_delay_ms(10); // Espera breve

		I2C_Master_Start(); // Nueva comunicación para leer
 546:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_Master_Start>
		bufferI2C_2 = slave_2 << 1 | 0b00000001; // Dirección + lectura
 54a:	81 e8       	ldi	r24, 0x81	; 129
 54c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <bufferI2C_2>
		temp = I2C_Master_Write(bufferI2C_2);
 550:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_Master_Write>
 554:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <temp>
		if (temp != 1){
 558:	81 30       	cpi	r24, 0x01	; 1
 55a:	19 f0       	breq	.+6      	; 0x562 <main+0x160>
			I2C_Master_Stop();
 55c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Master_Stop>
 560:	0d c0       	rjmp	.+26     	; 0x57c <main+0x17a>
		} else{
			TWCR0 = (1<<TWINT)|(1<<TWEN); // Preparar lectura
 562:	84 e8       	ldi	r24, 0x84	; 132
 564:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			while (!(TWCR0 & (1<<TWINT))); // Espera dato
 568:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 56c:	88 23       	and	r24, r24
 56e:	e4 f7       	brge	.-8      	; 0x568 <main+0x166>
			valorI2C_2 = TWDR0; // Guardar valor leído del ADC
 570:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 574:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
			I2C_Master_Stop();
 578:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Master_Stop>
 57c:	8f e3       	ldi	r24, 0x3F	; 63
 57e:	9c e9       	ldi	r25, 0x9C	; 156
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <main+0x17e>
 584:	00 c0       	rjmp	.+0      	; 0x586 <main+0x184>
 586:	00 00       	nop
 588:	9f ef       	ldi	r25, 0xFF	; 255
 58a:	21 ee       	ldi	r18, 0xE1	; 225
 58c:	84 e0       	ldi	r24, 0x04	; 4
 58e:	91 50       	subi	r25, 0x01	; 1
 590:	20 40       	sbci	r18, 0x00	; 0
 592:	80 40       	sbci	r24, 0x00	; 0
 594:	e1 f7       	brne	.-8      	; 0x58e <main+0x18c>
 596:	00 c0       	rjmp	.+0      	; 0x598 <main+0x196>
 598:	00 00       	nop
 59a:	57 cf       	rjmp	.-338    	; 0x44a <main+0x48>

0000059c <__udivmodsi4>:
 59c:	a1 e2       	ldi	r26, 0x21	; 33
 59e:	1a 2e       	mov	r1, r26
 5a0:	aa 1b       	sub	r26, r26
 5a2:	bb 1b       	sub	r27, r27
 5a4:	fd 01       	movw	r30, r26
 5a6:	0d c0       	rjmp	.+26     	; 0x5c2 <__udivmodsi4_ep>

000005a8 <__udivmodsi4_loop>:
 5a8:	aa 1f       	adc	r26, r26
 5aa:	bb 1f       	adc	r27, r27
 5ac:	ee 1f       	adc	r30, r30
 5ae:	ff 1f       	adc	r31, r31
 5b0:	a2 17       	cp	r26, r18
 5b2:	b3 07       	cpc	r27, r19
 5b4:	e4 07       	cpc	r30, r20
 5b6:	f5 07       	cpc	r31, r21
 5b8:	20 f0       	brcs	.+8      	; 0x5c2 <__udivmodsi4_ep>
 5ba:	a2 1b       	sub	r26, r18
 5bc:	b3 0b       	sbc	r27, r19
 5be:	e4 0b       	sbc	r30, r20
 5c0:	f5 0b       	sbc	r31, r21

000005c2 <__udivmodsi4_ep>:
 5c2:	66 1f       	adc	r22, r22
 5c4:	77 1f       	adc	r23, r23
 5c6:	88 1f       	adc	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	1a 94       	dec	r1
 5cc:	69 f7       	brne	.-38     	; 0x5a8 <__udivmodsi4_loop>
 5ce:	60 95       	com	r22
 5d0:	70 95       	com	r23
 5d2:	80 95       	com	r24
 5d4:	90 95       	com	r25
 5d6:	9b 01       	movw	r18, r22
 5d8:	ac 01       	movw	r20, r24
 5da:	bd 01       	movw	r22, r26
 5dc:	cf 01       	movw	r24, r30
 5de:	08 95       	ret

000005e0 <_exit>:
 5e0:	f8 94       	cli

000005e2 <__stop_program>:
 5e2:	ff cf       	rjmp	.-2      	; 0x5e2 <__stop_program>
